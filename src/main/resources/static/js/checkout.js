document.addEventListener('DOMContentLoaded', () => {
    const cartCount = document.querySelector('.cart-count');

    // –í–∑–µ–º–∞–º–µ —Å—Ç–æ–π–Ω–æ—Å—Ç—Ç–∞ –Ω–∞ cartCount –æ—Ç localStorage (–ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ 0, –∞–∫–æ –Ω—è–º–∞)
    const totalItems = localStorage.getItem('cartCount') || 0;

    // –û–±–Ω–æ–≤—è–≤–∞–º–µ –±—Ä–æ—è—á–∞ –≤ UI
    if (cartCount) {
        cartCount.textContent = totalItems;
    }

    const cart = JSON.parse(localStorage.getItem('cart')) || [];
    const cartItemsContainer = document.getElementById('cartItems');
    const grandTotalElement = document.getElementById('grandTotal');
    let grandTotal = 0;

    // –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ç–∞ —Å input –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –±—É—Ç–æ–Ω "Remove"
    cart.forEach((product, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td><img src="${product.img}" alt="${product.name}" style="width: 50px;"></td>
            <td>${product.name}</td>
            <td>${product.size}</td>
            <td>$${product.price}</td>
            <td>
                <input type="number" class="quantity" data-index="${index}" value="${product.quantity}" min="1" style="width: 50px;">
            </td>
            <td class="total-price">$${(product.price * product.quantity).toFixed(2)}</td>
            <td>
                <button class="remove-btn" data-index="${index}" style="background-color: red; color: white; border: none; padding: 5px 10px; cursor: pointer;">Remove</button>
            </td>
        `;
        cartItemsContainer.appendChild(row);
        grandTotal += product.price * product.quantity;
    });

    // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –æ–±—â–∞—Ç–∞ —Å—É–º–∞
    grandTotalElement.textContent = `Total: $${grandTotal.toFixed(2)}`;
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç –æ—Ç –∫–æ–ª–∏—á–∫–∞—Ç–∞
document.addEventListener('click', (event) => {
    if (event.target.classList.contains('remove-btn')) {
        const index = event.target.getAttribute('data-index');
        removeItem(index);
    }
});

document.getElementById('clearCart').addEventListener('click', () => {
    localStorage.removeItem('cart'); // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –∫–æ–ª–∏—á–∫–∞—Ç–∞
    localStorage.setItem('cartCount', 0); // –ù—É–ª–∏—Ä–∞–º–µ –±—Ä–æ—è—á–∞

    // –û–±–Ω–æ–≤—è–≤–∞–º–µ –±—Ä–æ—è—á–∞ –≤ UI
    const cartCountElement = document.querySelector('.cart-count');
    if (cartCountElement) {
        cartCountElement.textContent = "0";
    }

    window.location.reload(); // –ü—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–º–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞, –∑–∞ –¥–∞ —Å–µ –æ–±–Ω–æ–≤–∏ –∫–æ–ª–∏—á–∫–∞—Ç–∞
});

function removeItem(index) {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];

    // –ü—Ä–µ–º–∞—Ö–≤–∞–º–µ –∏–∑–±—Ä–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª
    cart.splice(index, 1);

    // –û–±–Ω–æ–≤—è–≤–∞–º–µ LocalStorage
    localStorage.setItem('cart', JSON.stringify(cart));
    localStorage.setItem('cartCount', cart.length);

    // –û–±–Ω–æ–≤—è–≤–∞–º–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
    window.location.reload();
}

// –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ —Ü–µ–Ω–∞—Ç–∞ –ø—Ä–∏ –ø—Ä–æ–º—è–Ω–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
document.addEventListener('input', (event) => {
    if (event.target.classList.contains('quantity')) {
        const index = event.target.getAttribute('data-index');
        const newQuantity = parseInt(event.target.value, 10) || 1;

        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        cart[index].quantity = newQuantity;
        localStorage.setItem('cart', JSON.stringify(cart));

        const row = event.target.closest('tr');
        const priceElement = row.querySelector('.total-price');
        priceElement.textContent = `$${(cart[index].price * newQuantity).toFixed(2)}`;

        updateGrandTotal();
    }
});

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –æ–±—â–∞—Ç–∞ —Å—É–º–∞
function updateGrandTotal() {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    let grandTotal = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
    document.getElementById('grandTotal').textContent = `Total: $${grandTotal.toFixed(2)}`;
}
//–ø–æ—Ä—ä—á–∫–∏
document.getElementById('deliveryForm').addEventListener('submit', async (event) => {
    event.preventDefault(); // –°–ø–∏—Ä–∞–º–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—Ç–æ –∏–∑–ø—Ä–∞—â–∞–Ω–µ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç–∞

    // –í–∑–µ–º–∞–º–µ CSRF —Ç–æ–∫–µ–Ω –æ—Ç –º–µ—Ç–∞ —Ç–∞–≥–æ–≤–µ—Ç–µ (–Ω–µ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –º–∞—Ö–∞)
    const csrfToken = document.querySelector('meta[name="_csrf"]').getAttribute('content');
    const csrfHeader = document.querySelector('meta[name="_csrf_header"]').getAttribute('content');

    // –í–∑–µ–º–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫–∞
    const formData = new FormData(event.target);
    const deliveryDetails = Object.fromEntries(formData);

    // –í–∑–µ–º–∞–º–µ —Ç–µ–∫—É—â–æ—Ç–æ —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–∫–∞—Ç–∞ –æ—Ç localStorage
    const cart = JSON.parse(localStorage.getItem('cart')) || [];

    if (cart.length === 0) {
        alert("Your cart is empty!");
        return;
    }

    // –í–∑–µ–º–∞–º–µ –∞–∫—Ç—É–∞–ª–Ω–æ—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç input –ø–æ–ª–µ—Ç–∞—Ç–∞
    const updatedCart = cart.map((item, index) => {
        const quantityInput = document.querySelector(`.quantity[data-index="${index}"]`);
        return {
            id: item.id,
            quantity: parseInt(quantityInput.value, 10) || 1,
            size: item.size
        };
    });

    // –í–∑–µ–º–∞–º–µ –º–µ—Ç–æ–¥–∞ –Ω–∞ –ø–ª–∞—â–∞–Ω–µ
    const paymentMethod = document.getElementById('paymentMethod').value;

    // –°—ä–∑–¥–∞–≤–∞–º–µ JSON –∑–∞—è–≤–∫–∞ –∑–∞ –ø–æ—Ä—ä—á–∫–∞—Ç–∞
    const orderData = {
        country: deliveryDetails.country,
        address: deliveryDetails.address,
        city: deliveryDetails.city,
        phone: deliveryDetails.phone,
        paymentMethod: paymentMethod,
        cartItems: updatedCart
    };

    try {
        console.log("üöÄ Submitting order:", JSON.stringify(orderData)); // ‚úÖ Debugging log

        console.log("üöÄ About to send fetch request to /checkout");

        const response = await fetch('/checkout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                [csrfHeader]: csrfToken // ‚úÖ –ò–∑–ø—Ä–∞—â–∞–º–µ CSRF —Ç–æ–∫–µ–Ω–∞
            },
            body: JSON.stringify(orderData)
        });

        console.log("üì° Response status:", response.status); // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Ç–≥–æ–≤–æ—Ä–∞

        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ —Å—ä—Ä–≤—ä—Ä—ä—Ç –≤—Ä—ä—â–∞ redirect (HTML, –∞ –Ω–µ JSON)
        if (response.redirected) {
            console.log("üîÑ Redirecting to:", response.url);
            window.location.href = response.url;
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–≤–∞–º–µ –¥–∞–ª–∏ –æ—Ç–≥–æ–≤–æ—Ä—ä—Ç –µ JSON, –∑–∞ –¥–∞ –∏–∑–±–µ–≥–Ω–µ–º –≥—Ä–µ—à–∫–∏
        const contentType = response.headers.get("content-type");
        if (!contentType || !contentType.includes("application/json")) {
            console.error("‚ùå Expected JSON but received:", contentType);
            alert("Unexpected response from the server.");
            return;
        }

        const responseData = await response.json();
        console.log("‚úÖ Response data:", responseData);

        if (responseData.success) {
            alert(responseData.success); // –ü–æ–∫–∞–∑–≤–∞–º–µ —Å—ä–æ–±—â–µ–Ω–∏–µ –∑–∞ —É—Å–ø–µ—à–Ω–∞ –ø–æ—Ä—ä—á–∫–∞

            // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –∫–æ–ª–∏—á–∫–∞—Ç–∞ –∏ –±—Ä–æ—è—á–∞ –≤ localStorage
            localStorage.removeItem('cart');
            localStorage.setItem('cartCount', 0);

            // –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ UI –±—Ä–æ—è—á–∞
            const cartCountElement = document.querySelector('.cart-count');
            if (cartCountElement) {
                cartCountElement.textContent = "0";
            }

            // –ü—Ä–µ–Ω–∞—Å–æ—á–≤–∞–º–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –∫—ä–º –Ω–∞—á–∞–ª–Ω–∞—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            window.location.href = responseData.redirect || '/home';
        } else {
            alert("‚ùå Error: " + (responseData.error || "Something went wrong!"));
        }

    } catch (error) {
        console.error("üî• Fetch request failed:", error);
        alert("There was a problem submitting your order. Please try again.");
    }

});
